// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('projectApp').controller('mapsCtrl', function($scope, Auth, $location, $http) {
    var api, bounds, getJSONData, i, image, locations, map, mapOptions, showOnMap, userId, usersArray;
    userId = Auth.getCurrentUser()._id;
    $scope.formvalue = {};
    $scope.formvalue.numberOfResidents = "";
    $scope.formvalue.meterType = "0";
    $scope.formvalue.insulation = "0";
    $scope.formvalue.sizeOfBuilding = "0";
    $scope.formvalue.typeOfHeating = "0";
    $scope.customError = "";
    api = "AIzaSyDiPv6sSKzmOR1INjC_9kHxUY6bpwKOXHc";
    map;
    usersArray = [];
    i = 0;
    bounds = new google.maps.LatLngBounds();
    mapOptions = {
      zoom: 10
    };
    image = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png';
    locations = [];
    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    $http.get('/api/extradata/' + userId).then(function(userdata) {
      return $scope.user = userdata.data;
    });
    $http.get('/api/extradata/').then(function(usersdata) {
      usersArray = usersdata.data;
      return getJSONData(usersArray);
    });
    $scope.changed = function() {
      var datafield, index, user, users, _i, _len;
      users = [];
      for (_i = 0, _len = usersArray.length; _i < _len; _i++) {
        user = usersArray[_i];
        for (datafield in $scope.formvalue) {
          if ($scope.formvalue[datafield] !== "" && $scope.formvalue[datafield] !== "0") {
            if (user[datafield] === $scope.formvalue[datafield]) {
              if (__indexOf.call(users, user) < 0) {
                users.push(user);
              }
            } else {
              if (__indexOf.call(users, user) >= 0) {
                index = users.indexOf(user);
                console.log(index);
                users.splice(index, 1);
                break;
              } else {
                break;
              }
            }
          }
        }
      }
      console.log(users);
      if (users.length === 0) {
        console.log("customError");
        $scope.customError = "Er werden geen waarden gevonden die voldoen aan uw zoekcriteria. Alle gebruikers zullen worden getoond.";
        users = usersArray;
      } else {
        $scope.customError = "";
      }
      return getJSONData(users);
    };
    getJSONData = function(users) {
      var urlForLatAndLong, user, _i, _len, _results;
      map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        if (user.accountId === userId) {
          image = '/assets/images/markers/letter_h.png';
        } else {
          image = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png';
        }
        locations.push([user._id, user.address.street, user.address.zipcode, user.address.city, user.address.country]);
        urlForLatAndLong = "https://maps.googleapis.com/maps/api/geocode/json?address=" + user.address.street + "+" + user.address.city + "+" + user.address.country + "&key=" + api;
        $.ajax({
          url: urlForLatAndLong,
          dataType: 'json',
          async: false,
          success: function(data) {
            var lat, long;
            lat = data["results"][0]["geometry"]["location"]["lat"];
            long = data["results"][0]["geometry"]["location"]["lng"];
            return showOnMap(lat, long, i);
          }
        });
        _results.push(i++);
      }
      return _results;
    };
    return showOnMap = function(lat, long, i) {
      var infoWindow, marker, myLatLng;
      myLatLng = new google.maps.LatLng(lat, long);
      bounds.extend(myLatLng);
      marker = new google.maps.Marker({
        position: myLatLng,
        map: map,
        icon: image
      });
      infoWindow = new google.maps.InfoWindow();
      marker;
      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          var content;
          content = "<div id='content'>" + "<h1>" + locations[i][0] + "</h1>" + "<p><i>" + locations[i][1] + "<br />" + locations[i][2] + " " + locations[i][3] + "</i></p>" + "</div>";
          infoWindow.setContent(content);
          return infoWindow.open(map, marker);
        };
      })(marker, i));
      return map.fitBounds(bounds);
    };
  });

}).call(this);

//# sourceMappingURL=maps.controller.js.map
